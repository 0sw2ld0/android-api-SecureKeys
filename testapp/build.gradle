apply plugin: 'com.android.application'

android {
    compileSdkVersion project.targetApiLevel.toInteger()
    buildToolsVersion project.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion project.minApiLevel
        targetSdkVersion project.targetApiLevel
        versionName libraryVersion
        applicationId "com.u.testapp"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "build/secure-keys/include/main/cpp/CMakeLists.txt"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Dont put here sensible data, the attacker can see it unencrypted in the BuildConfig file later!!
            // If your app has Proguard (and you do remove the BuildConfig fields), then its no problem at all.
            buildConfigField "String", "TESTING_VALUE_1", "\"5000\""
            buildConfigField "String", "TESTING_VALUE_2", "\"3.1415\""
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Dont put here sensible data, the attacker can see it unencrypted in the BuildConfig file later!!
            // If your app has Proguard (and you do remove the BuildConfig fields), then its no problem at all.
            buildConfigField "String", "TESTING_VALUE_1", "\"5000\""
            buildConfigField "String", "TESTING_VALUE_2", "\"3.1415\""
        }
    }
}

task extractSecureKeysNativeFiles {
    doLast {
        configurations.all*.each {
            def file = it.absoluteFile
            if (file.absolutePath.contains("com.saantiaguilera.securekeys/core")) {
                println "copying into ${project.file('.').absolutePath}/build/secure-keys"
                println file
                copy {
                    from zipTree(file)
                    into "build/"
                    include "secure-keys/include/**"
                }
            }
        }
    }
}
build.dependsOn('extractSecureKeysNativeFiles')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile') || task.name.startsWith('assemble')) {
        task.dependsOn('extractSecureKeysNativeFiles')
    }
}

dependencies {
    compile support.appcompat

    // For using the published ones:
//    compile me.core
//    annotationProcessor me.processor

    // For using the project ones:
    compile "com.saantiaguilera.securekeys:core:TEST-1.0.1"
    annotationProcessor project(path:':processor')
}
