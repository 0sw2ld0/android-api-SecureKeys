apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        consumerProguardFile 'proguard-rules.pro'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

/**
 * Since we cant add our path to the java.library.path (.so lookup places)
 * because gradle will eventually overwrite them with the defaults, we add it
 * to one of those our lib and then delete it
 */
task setupJNILibrary() {
    doLast {
        def soFilePath = './build/core/src/main/cpp/libsecure-keys.so';
        File inputFile = new File(soFilePath)
        if (inputFile.exists()) {
            def possiblePlaces = System.properties.'java.library.path'.tokenize(':')
            possiblePlaces.each { dest ->
                File destFile = new File("${dest}/libsecure-keys.so")

                try {
                    if (destFile.createNewFile() || destFile.exists()) {
                        destFile << inputFile.bytes
                        println destFile.absolutePath
                    }
                } catch (IOException ioEx) {
                    // Silent. The dir is probably protected for write access
                }
            }
        } else {
            throw new GradleException(".so file not found. Please run from the root-project folder:\n" +
                "1. mkdir build && cd build\n" +
                "2. cmake ..\n" +
                "3. make")
        }
    }
}

task teardownJNILibrary() {
    doLast {
        def possiblePlaces = System.properties.'java.library.path'.tokenize(':')
        for (def place : possiblePlaces) {
            File file = new File("${place}/libsecure-keys.so")
            if (file.exists()) {
                file.delete()
            }
        }
    }
}

tasks.withType(Test) { task ->
    task.dependsOn project.tasks.setupJNILibrary
    project.tasks.teardownJNILibrary.shouldRunAfter task
}

dependencies {
    compile project(path:':annotation')

    compile support.annotations

    testCompile testing.junit
    testCompile testing.googleTruth
    testCompile testing.googleTesting
    testAnnotationProcessor project(path:':processor')
}
