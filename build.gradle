apply plugin: 'com.saantiaguilera.gradle.publish.helper'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$buildGradlePluginVersion"

        classpath "com.saantiaguilera.gradle.publish.helper:core:$publishHelperPluginVersion"

        classpath "com.saantiaguilera.securekeys.gradle:plugin:$libraryDynamicVersion"

        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayGradlePluginVersion")
        classpath("com.github.dcendents:android-maven-gradle-plugin:$mavenGradlePluginVersion")
    }
}

allprojects {
    repositories {
        jcenter()
        // TODO
        // Currently this unreleased version is using as dependencies
        // Snapshots of the last build
        maven {
            url "https://dl.bintray.com/saantiaguilera/maven-tests"
        }
        maven {
            url "https://maven.google.com"
        }
    }
}

publishGlobalConfigurations {
    groupId = project.groupId
    versionName = libraryVersion

    githubUrl = "saantiaguilera/android-api-SecureKeys"

    // TODO Before releasing both variables should be rollbacked
    bintrayRepository = 'maven-tests'
    override = true

    bintrayUser = System.getenv('BINTRAY_SANTI_USER')
    bintrayApiKey = System.getenv('BINTRAY_SANTI_KEY')

    licenseUrl = "http://www.opensource.org/licenses/BSD-3-Clause"
    licenseName = "BSD"
}

apply from: 'dependencies.gradle'

configure(subprojects.findAll { it.name != 'testapp' && it.name != 'plugin' }) { subproject ->
    def androidLibs = ['core']
    def javaLibs = ['annotation', 'processor']

    if (androidLibs.contains(subproject.name)) {
        apply plugin: 'com.android.library'

        android {
            compileSdkVersion project.targetApiLevel.toInteger()
            buildToolsVersion project.androidBuildToolsVersion

            defaultConfig {
                minSdkVersion project.minApiLevel
                targetSdkVersion project.targetApiLevel
                versionName libraryVersion
                consumerProguardFile 'proguard-rules.pro'
            }
        }
    }

    if (javaLibs.contains(subproject.name)) {
        apply plugin: 'java'

        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile testing.junit
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

wrapper {
    version = '3.5.1'
    distributionType = Wrapper.DistributionType.ALL
}
