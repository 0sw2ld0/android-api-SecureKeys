buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            // Until it is in jcenter
            url  "http://dl.bintray.com/saantiaguilera/maven"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'

        if (PUBLISH) {
            classpath 'com.saantiaguilera.gradle.helper:library:1.0.0'

            classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3")
            classpath("com.github.dcendents:android-maven-gradle-plugin:1.5")
        }
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
        maven {
            // Until it is in jcenter
            url  "http://dl.bintray.com/saantiaguilera/maven"
        }
    }
}

apply from: 'dependencies.gradle'

configure(subprojects.findAll { it.name != "testapp" }) {
    def androidLibs = ['core']
    def javaLibs = ['annotation', 'processor']

    if (androidLibs.contains(it.name)) {
        if (PUBLISH) {
            apply plugin: 'com.saantiaguilera.gradle.library'
        } else {
            apply plugin: 'com.android.library'
        }
    }

    if (javaLibs.contains(it.name)) {
        if (PUBLISH) {
            apply plugin: 'com.saantiaguilera.gradle.java'
        } else {
            apply plugin: 'java'
        }

        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    repositories {
        mavenCentral()
    }

    ext.isPublishing = PUBLISH && it.gradle.startParameter.taskNames.toListString().contains("${it.name}:publish")

    if (PUBLISH) {
        publisher.groupId = groupId
        publisher.artifactId = it.name
        publisher.version = libraryVersion
    }

    dependencies {
        testCompile testing.junit
    }
}

task publishRelease() {
    def releaseOrder = ['annotation', 'core', 'processor']
    def getProjectByName = { name ->
        for (Project subproject : subprojects) {
            if (subproject.name == name) {
                return subproject
            }
        }
        return null
    }
    doLast {
        releaseOrder.each { lib ->
            def libProject = getProjectByName lib
            libProject.tasks.publishRelease.execute()
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

wrapper {
    version = '3.5.1'
    distributionType = Wrapper.DistributionType.ALL
}